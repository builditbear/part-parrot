package viewcontrollers;

import javafx.event.ActionEvent;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.stage.Stage;
import model.InHouse;
import model.Inventory;
import model.Outsourced;
import model.Part;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

import static model.Inventory.addPart;
import static model.Utilities.*;

/** Manages user interaction with the screen used to both add and modify Parts. */
public class AddModifyPartScreen extends AddModifyController implements Initializable {

    public RadioButton inHouse;
    public ToggleGroup partType;
    public RadioButton outsourced;
    public Label typeSpecific;
    public TextField typeSpecificField;

    /** Initializes this controller. Check for the presence of a Part to be modified in the selectedPart static
     *  Part variable, and renders the associated view as the "Modify Part" screen if such data is available,
     *  pre-populating the Part's data into the appropriate text fields for editing. */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        // Render the part to be modified if one was passed in.
        Part selectedPart = getSelectedPart();
        if(selectedPart != null) {
            title.setText("Modify Part");
            idField.setText(Integer.toString(selectedPart.getId()));
            nameField.setText(selectedPart.getName());
            invField.setText(Integer.toString(selectedPart.getStock()));
            priceField.setText(Double.toString(selectedPart.getPrice()));
            maxField.setText(Integer.toString(selectedPart.getMax()));
            minField.setText(Integer.toString(selectedPart.getMin()));

            if(selectedPart instanceof InHouse part) {
                inHouse.setSelected(true);
                typeSpecific.setText("Machine ID");
                typeSpecificField.setText(Integer.toString(part.getMachineId()));
            } else if(selectedPart instanceof Outsourced part){
                outsourced.setSelected(true);
                typeSpecific.setText("Company Name");
                typeSpecificField.setText(part.getCompanyName());
            }
        }
    }

    /** Event handler for the InHouse radio button.
     *
     * @param actionEvent The event generated by interacting with the InHouse radio button.
     */
    public void onInHouse(ActionEvent actionEvent) {
        typeSpecific.setText("Machine ID");
    }

    /** Event handler for the Outsourced radio button.
     *
     * @param actionEvent The event generated by interacting with the Outsourced radio button.
     */
    public void onOutsourced(ActionEvent actionEvent) {
        typeSpecific.setText("Company Name");
    }

    /** Event handler for the save button. Either updates an existing Part or adds a new Part to Inventory, if input
     * passes validation testing.
     *
     * @param actionEvent The event generated by interacting with the save button.
     */
    public void onSave(ActionEvent actionEvent) throws IOException {
        // If this is the Add Part screen, validate and extract input from the text fields, create a new part,
        // and add it to inventory.
        Part newPart = null;
        if(inHouse.isSelected()) {
            newPart = getPartFromFields(InHouse.class);
        } else if(outsourced.isSelected()) {
            newPart = getPartFromFields(Outsourced.class);
        }

        try {
            assert newPart != null;
        } catch(NullPointerException e) {
            System.out.println("the newPart object you are trying to save is null.");
            loadMainScene((Stage) title.getScene().getWindow());
        }

        if(validPartFields(newPart)) {
            if(title.getText().equals("Add Part")) {
                addPart(newPart);
            } else if(title.getText().equals("Modify Part")) {
                Part part = getSelectedPart();
                newPart.setId(part.getId());
                updatePart(part, newPart);
            }
            loadMainScene((Stage) title.getScene().getWindow());
        } else {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Invalid Part Fields");
            alert.setContentText("Max must be more than Min and Stock/Inv must be between those values.");
            alert.showAndWait();
        }
    }

    /** Validates a Part's Max, Min, and Stock/Inv fields to ensure they do not contradict one another.
     *
     * @param newPart A newly generated Part to be validated.
     * @return True if validation testing is passed, and False otherwise.
     */
    private boolean validPartFields(Part newPart) {
        return newPart.getMin() < newPart.getMax() && newPart.getStock() >= newPart.getMin()
                && newPart.getStock() <= newPart.getMax();
    }

    /** Replaces the given Part with the given newPart.
     *
     * @param part The Part to be replaced.
     * @param newPart The replacement Part.
     */
    public void updatePart(Part part, Part newPart) {
        int indexOfPart = Inventory.getAllParts().indexOf(part);
        if (inHouse.isSelected()) {
            int machineId = 0;
            // If the entered machine ID isn't an integer, then, depending on the type of the original part,
            // either the old machineId will remain or a new one will be generated.
            if (validateIntInput(typeSpecificField.getText())) {
                machineId = Integer.parseInt(typeSpecificField.getText());
            } else if(part instanceof InHouse) {
                machineId = ((InHouse) part).getMachineId();
            } else if(part instanceof Outsourced) {
                machineId = generateId(2);
            }
            ((InHouse) newPart).setMachineId(machineId);
        } else if (outsourced.isSelected()) {
                String companyName = typeSpecificField.getText();
                ((Outsourced) newPart).setCompanyName(companyName);
        }
        Inventory.updatePart(indexOfPart, newPart);
        setSelectedPart(null);
    }

    /** Validate and extract values from the current view, converting them into a Part
     *
     * @param type The type of Part to be returned by this method, as determined by the radio button selected by the user.
     * @return A new Part of the InHouse or Outsourced Part subclass.
     */
    public <T extends Part> T getPartFromFields (Class<T> type){
        String name = nameField.getText();
        int inv = 0;
        if(validateIntInput(invField.getText())) {
            inv = Integer.parseInt(invField.getText());
        }
        double price = 0;
        if(validateDoubleInput(priceField.getText())) {
            price = Double.parseDouble(priceField.getText());
        }
        int max = 1;
        if(validateIntInput(maxField.getText())) {
            max = Integer.parseInt(maxField.getText());
        }
        int min = 0;
        if(validateIntInput(minField.getText()) && min < max) {
            min = Integer.parseInt(minField.getText());
        }
        if(inHouse.isSelected()) {
            int machineId = randomInt(10000);
            if(validateIntInput(typeSpecificField.getText())) {
                machineId = Integer.parseInt(typeSpecificField.getText());
            }
            return type.cast(new InHouse(generateId(0), name, price, inv, min, max, machineId));
        } else if(outsourced.isSelected()) {
            String companyName = typeSpecificField.getText();
            return type.cast(new Outsourced(generateId(0), name, price, inv, min, max, companyName));
        }
        return null;
    }

    /** Event handler for the Cancel button.
     *
     * @param actionEvent The event generated via interaction with the Cancel button.
     */
    public void onCancel(ActionEvent actionEvent) throws IOException{
        loadMainScene((Stage) title.getScene().getWindow());
    }
}
